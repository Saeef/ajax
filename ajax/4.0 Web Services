> This usually would go before, but just a few notes cause I want to look into SOAP      
> for a project I have to do.   

## Web Services
In its simplest form, a web service is a framework for a conversation between two computers over the web: a client and a server and nearly always handled over HTTP.   
You can only use web services if you know how to speak their language. There's a big difference between knowing how to talk to
a web service, and knowing and how it's working in the server environment.

When you send a request to the web service you'll need to know whether to use SOAP or JSON. HTTP PUT or GET request and so on. But,
you usually don't need to know what programming language, database or other technologies are being used in the server environment.
It doesn't matter whether the service is managed by PHP, ASP.net or Node.js. As long as you send the request in the right format
and get back the expected responses, you'll be able to call the web service from your client-side application.

Most common standars are SOAP, REST and Odata

### SOAP (Simple Object Access Protocol)

- An XML-based language that represents request and response messages between clients and servers
- Developed by Microsoft in the late 90's
- Usually used with HTTP(s), but is compatible with asynchronous protocols (FTP, SMTP)


```
	<env:Envelope
	   xmlns:env="http://www.w3.org/2003/05/soap-envelope">

	   ...
	</env:Envelope>   

```

A SOAP Response:

```
	<?xml version="1.0" ?>
	<soap:Envelope
		xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
		<soap:Body xmlns:m="http://www.example.org/stock">
			<m:GetStockPriceResponse>
				<m:Price>34.5</m:Price>
			</m:GetStockPriceResponse>
		</soap:Body>
	</soap:Envelope>			

```

- SOAP supports a large number of datatypes (they include strings, booleans, date times and so on)

```
		<element name="id" type="xsd:integer" />
		<element name="name" type="xsd:string" />
		<element name="age" type="xsd:integer" />

```

SOAP Complex Types:

```
	<element name="Book">
		<complexType>
			<element name="author" type="xsd:string" />
			<element name="preface" type="xsd:string" />
			<element name="intro" type="xsd:string" />
		</complexType>
	</e:Book>

	And it would look like this:

	<e:Book>
		<e:author>Henry Sammuelson</author>
		<e:preface>Text in the preface</preface>
		<e:intro>intro for the book</intro>
	</e:Book>	

```


